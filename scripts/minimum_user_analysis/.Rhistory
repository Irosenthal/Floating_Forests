lengths(sel) > 0
#-------------#
#spatial joins####
#also called spatial overlay
# you have ten points randomly distributed across the Earthâ€™s surface. Of the points that are on land, which countries are they in?
#1. create random points:
set.seed(2018) # set seed for reproducibility
(bb_world = st_bbox(world)) # the world's bounds
#this is the output of that
#>   xmin   ymin   xmax   ymax
#> -180.0  -90.0  180.0   83.6
#use these boundaries to generate 10 random x,y combos that are anywhere on earth
random_df = tibble(
x = runif(n = 10, min = bb_world[1], max = bb_world[3]),
y = runif(n = 10, min = bb_world[2], max = bb_world[4])
)
#convert from x,y to an sf object by giving them an epsg code and telling sf that these are long/lats
random_points = random_df %>%
st_as_sf(coords = c("x", "y")) %>% # set coordinates
st_set_crs(4326) # set geographic CRS
#these are points with no attribute data
#world has attribute data. join these sets based on long/lat, which will then add country names to the points
#first to self check, subset world down to only the countries that contain a random point
world_random <- world[random_points, ] #as review, grab all rows and cols from world that match the data in the random_points sf
nrow(world_random)
#4. this means we should expect 4 countries after we join
#do the join. we only care about the name column so only join on that one.
#remember that these are sf objects and the geom data comes no matter what we do.
#st_join will automatically use that for the spatial join.
random_joined <- st_join(random_points, world["name_long"])
plot(random_joined)
#not the right way to plot it but confirms we had 4 results, and they look right when you squint and pretend there's a map there.
#notes on st_join:
#left join by default, use arguemnt left = FALSE to make it an inner join
#use join = argument to change spatial operator. st_intersects is default
##-----##
#non overlapping joins ####
#sometimes two spatial datasets are related but never actually touch.
plot(st_geometry(cycle_hire), col = "blue")
plot(st_geometry(cycle_hire_osm), add = TRUE, pch = 3, col = "red")
#these points are obviously related, but we can see that they do not technically touch
any(st_touches(cycle_hire, cycle_hire_osm, sparse = FALSE))
#what if we wanted to join the "capacity" variable from cycle_hire_osm to the offical "target" data in cycle_hire
#can use st_is_within_distance to do this join.
#first, transform everything to be in the same, projected crs
cycle_hire_P = st_transform(cycle_hire, 27700)
cycle_hire_osm_P = st_transform(cycle_hire_osm, 27700)
#do the join, in this case set distance to 20 meters
sel = st_is_within_distance(cycle_hire_P, cycle_hire_osm_P, dist = 20)
summary(lengths(sel) > 0)
#now we see that there are 304 objects that aren't close enough, but 438 that are within 20 meters. how do we get these values?
#use st_join! include a different join operator and the distance arg
z = st_join(cycle_hire_P, cycle_hire_osm_P, join = st_is_within_distance, dist = 20)
nrow(cycle_hire_P)
nrow(z)
#cool. note that z has more rows than the original data: this is because some points in cycle_hire_p had multiple matches in cycle_hire_osm_p
#address this by aggregating overlapping points and finding the mean of capacity
z = z %>%
group_by(id) %>%
summarize(capacity = mean(capacity))
#does the joine daset match the original data better now?
nrow(z) == nrow(cycle_hire)
#yes!
plot(cycle_hire_osm["capacity"])
plot(z["capacity"], add = T)
#they line up perfectly
#we used a spatial operation to change attribute data associated with simple features while leaving the geometries untouched.
#----#
# spatial data aggregation ####
#back to new zealand. what is the average height of all high points by region?
nz_avheight <- nz %>% #start with nz data
st_join(nz_height) %>%  #join on elevation data
group_by(Name) %>% #group by region name
summarise(elevation = mean(elevation, na.rm = T)) #summarise avg elevation
plot(nz_avheight[2]) #rough plot but shows it worked!
#distance relations#####
#topological relationships are binary, distance relations are continuous
#use st_distance to find distance between features
#example: find distance between highest point of new zealand and centroid of canterbury
#1. get the highest point
nz_highest <- nz_height %>% top_n(n = 1, wt = elevation)
#2. get the centroid of canterbury (go from polygon to a point at the center)
canterbury_centroid <- st_centroid(canterbury)
#3. find the distance between these two
st_distance(nz_highest, canterbury_centroid)
#two things. first, we get units (woo). second, it's a matrix.
#this means we can create distance matrices; the distances between all combinations of features in two sf objects
#find the distances between the first three features in nz_height and the regions of both otago and canterbury
#get top 3 points
nz_top_3 <- nz_height[1:3,]
#filter nz down to the regions of interest
cant_ota <- nz %>%
filter(Name == "Canterbury" |
Name == "Otago")
#find distance matrix
st_distance(nz_top_3, cant_ota)
#thoughts. could do this with centroids, but might be less informative. distance values of 0 mean a point is contained within a polygon, which can be useful.
#if you use centroids, you are unlikely to gain this info because nothing will ever perfectly match the centroid.
##-----##
#non overlapping joins ####
#sometimes two spatial datasets are related but never actually touch.
plot(st_geometry(cycle_hire), col = "blue")
plot(st_geometry(cycle_hire_osm), add = TRUE, pch = 3, col = "red")
##-----##
#non overlapping joins ####
#sometimes two spatial datasets are related but never actually touch.
plot(st_geometry(cycle_hire), col = "blue")
plot(st_geometry(cycle_hire_osm), add = TRUE, pch = 3, col = "red")
#these points are obviously related, but we can see that they do not technically touch
any(st_touches(cycle_hire, cycle_hire_osm, sparse = FALSE))
#use st_join! include a different join operator and the distance arg
z = st_join(cycle_hire_P, cycle_hire_osm_P, join = st_is_within_distance, dist = 20)
nrow(cycle_hire_P)
nrow(z)
#address this by aggregating overlapping points and finding the mean of capacity
z = z %>%
group_by(id) %>%
summarize(capacity = mean(capacity))
#does the joine daset match the original data better now?
nrow(z) == nrow(cycle_hire)
#yes!
plot(cycle_hire_osm["capacity"])
plot(z["capacity"], add = T)
#----#
# spatial data aggregation ####
#back to new zealand. what is the average height of all high points by region?
nz_avheight <- nz %>% #start with nz data
st_join(nz_height) %>%  #join on elevation data
group_by(Name) %>% #group by region name
summarise(elevation = mean(elevation, na.rm = T)) #summarise avg elevation
devtools::install_github("dkahle/ggmap", ref = "tidyup")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
install.packages("curl")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
install.packages("Rcpp")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
#analysis to find minimum number of users required for optimal mcc
library(readr)
library(sf)
library(fasterize)
library(ggmap)
library(tidyverse)
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
library(installr)
updateR()
install.packages("yaml")
#analysis to find minimum number of users required for optimal mcc
library(readr)
library(sf)
library(fasterize)
install.packages("sf")
library("bayesplot", lib.loc="C:/R/R-3.5.2/library")
install.packages("tidyverse")
install.packages("fasterize")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
install.packages("digest")
pkgs <- rownames(available.packages())
library("abind", lib.loc="C:/R/R-3.5.2/library")
library("assertthat", lib.loc="C:/R/R-3.5.2/library")
install.packages(c("audio", "backports", "brms", "broom", "callr", "caTools", "class", "clipr", "codetools", "colorspace", "data.table", "dbplyr", "dplyr", "DT", "evaluate", "git2r", "glue", "haven", "highr", "hms", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "leaflet", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "mime", "modelr", "munsell", "nloptr", "openssl", "packrat", "pillar", "pkgconfig", "psych", "purrr", "R.matlab", "R.oo", "R.utils", "R6", "raster", "RcppEigen", "RCurl", "readr", "readxl", "reprex", "rgdal", "rgeos", "RgoogleMaps", "rjson", "RJSONIO", "rmarkdown", "rsconnect", "rstan", "rstudioapi", "scales", "shiny", "shinythemes", "sourcetools", "sp", "spData", "StanHeaders", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridis", "viridisLite", "xtable", "xts"))
#analysis to find minimum number of users required for optimal mcc
library(readr)
library(sf)
library(fasterize)
library(ggmap)
library(tidyverse)
install.packages("Rcpp")
install.packages("rlang")
library(readr)
library(sf)
library(fasterize)
library(ggmap)
library(tidyverse)
install.packages("lazyeval")
install.packages("bindrcpp")
install.packages("classInt")
install.packages(c("furrr", "spex"))
setwd("C:/Users/Isaac/OneDrive/FF/clean/scripts/minimum_user_analysis")
#data
classifications <- readRDS("../../data/output/raw_data_pipeline/zone_10_classifications.rds"))
#data
classifications <- readRDS("../../data/output/raw_data_pipeline/zone_10_classifications.rds")
#data
classifications <- readRDS("../../data/output/raw_data_pipeline//level_0/zone_10_classifications.rds")
#basic rasterization
#make user_name a factor to be used with fasterize
classifications$user_name <- as.factor(classifications$user_name)
r <- fasterize(classifications %>% filter(subject_zooniverse_id == subject_zooniverse_id[1]), #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
library(sf)
library(fasterize)
library(tidyverse)
library(raster)
r <- fasterize(classifications %>% filter(subject_zooniverse_id == subject_zooniverse_id[1]), #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
fun = "count")
#filter to one subject for testing
one_subject <- classifications %>%
filter(subject_zooniverse_id == subject_zooniverse_id[1])
r <- fasterize(one_subject, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
plot(r)
?plan
??plan
rasterize_one_subject <- function(one_subject, res = 10, write_out_tile = TRUE){
cat(str_c("Rasterizing ", one_subject$subject_ids[1], "...\n"))
#make sure this isn't a blank tile
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty)) %>%
dplyr::filter(!empt) %>%
dplyr::select(-empt)
#refilter
#,
#           txt = map_chr(geometry, st_as_text)) %>%
#   filter(str_detect(txt, "POLYGON")) %>% #fasterize borks otherwise
#   dplyr::select(-txt)
#if it's all empty, create an empty raster
#using subject as the bbox
if(nrow(one_subject_nonempty)==0){
one_line <- one_subject[1,]
rast <- raster(crs = st_crs(one_subject),
res = res,
xmn = as.numeric(one_line$`#tile_UL_x`),
xmx = as.numeric(one_line$`#tile_LR_x`),
ymn = as.numeric(one_line$`#tile_LR_y`),
ymx = as.numeric(one_line$`#tile_UL_y`))
}else{
rast <- fasterize(one_subject_nonempty %>% mutate(value = 1),
raster(one_subject_nonempty, res = res),
field = "value", fun = "sum")
}
#write out the tile in the meanwhile
if(write_out_tile){
#supressing warnings for blank rasters
suppressWarnings(
out <- writeRaster(rast, str_c(write_dir, one_subject$subject_ids[1], ".grd"), overwrite=TRUE)
)
}
return(rast)
}
st_get_npts <- function(x){
sapply(x, function(x) nrow(x[[1]]))
}
st_get_npts_sum <- function(x){
pts <- st_get_npts(x)
sum(pts)
}
st_get_npoly <- function(x){
length(x)
}
rasterize_one_subject(one_subject = one_subject)
#some multipolygons have places where a user
#just clicked on a point or a line
st_remove_points <- function(x){
pts <- which(st_get_npts(x)>3)
if(length(pts)==length(x)) return(x) #safeguard
# map(pts, ~pluck(x, .)) %>%
#   st_multipolygon
valid_geom <- st_make_valid(x) %>%
st_cast(to = "GEOMETRYCOLLECTION")
geom_pieces <- map_lgl(valid_geom, ~  1  <= sum(str_detect(class(.x), "POLYGON")))
#in case there was nothing
if(sum(geom_pieces) == 0) return(st_multipolygon())
#in case it's 1 polygon
valid_geom <- valid_geom[geom_pieces][[1]]
if(!("MULTIPOLYGON" %in% class(valid_geom)))
valid_geom <- st_cast(valid_geom, "MULTIPOLYGON")
#return!
return(valid_geom)
}
rasterize_one_subject(one_subject = one_subject)
write_dir <- "../../../data/relaunch_data/level_0/raster_tiles/"
rasterize_one_subject(one_subject = one_subject)
write_dir <- "../../data/relaunch_data/level_0/raster_tiles/"
rasterize_one_subject(one_subject = one_subject)
getwd()
write_dir <- "../../data/raw_data_pipeline/level_0/raster_tiles/"
rasterize_one_subject(one_subject = one_subject)
write_dir <- "../../data/output/raw_data_pipeline/level_0/raster_tiles/"
rasterize_one_subject(one_subject = one_subject)
#make sure this isn't a blank tile
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty)) %>%
dplyr::filter(!empt) %>%
dplyr::select(-empt)
nrow(one_subject_nonempty)==0)
nrow(one_subject_nonempty)==0
one_line <- one_subject[1,]
rast <- raster(crs = st_crs(one_subject),
res = res,
xmn = as.numeric(one_line$`#tile_UL_x`),
xmx = as.numeric(one_line$`#tile_LR_x`),
ymn = as.numeric(one_line$`#tile_LR_y`),
ymx = as.numeric(one_line$`#tile_UL_y`))
View(one_line)
r
rast <- fasterize(one_subject_nonempty, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
rast
rasterize_one_subject <- function(one_subject, res = 10, write_out_tile = TRUE){
cat(str_c("Rasterizing ", one_subject$subject_ids[1], "...\n"))
#make sure this isn't a blank tile
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty)) %>%
dplyr::filter(!empt) %>%
dplyr::select(-empt)
#rasterize based on these nonempty SFS: get it working with all, then add ifelse to have it kick out a blank raster when empty
rast <- fasterize(one_subject_nonempty, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
#write out the tile in the meanwhile
if(write_out_tile){
#supressing warnings for blank rasters
suppressWarnings(
out <- writeRaster(rast, str_c(write_dir, one_subject$subject_ids[1], ".grd"), overwrite=TRUE)
)
}
return(rast)
}
rasterize_one_subject(one_subject)
#supressing warnings for blank rasters
suppressWarnings(
out <- writeRaster(rast, str_c(write_dir, one_subject$subject_zooniverse_id[1], ".grd"), overwrite=TRUE)
)
rasterize_one_subject <- function(one_subject, res = 10, write_out_tile = TRUE){
cat(str_c("Rasterizing ", one_subject$subject_ids[1], "...\n"))
#make sure this isn't a blank tile
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty)) %>%
dplyr::filter(!empt) %>%
dplyr::select(-empt)
#rasterize based on these nonempty SFS: get it working with all, then add ifelse to have it kick out a blank raster when empty
rast <- fasterize(one_subject_nonempty, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
#write out the tile in the meanwhile
if(write_out_tile){
#supressing warnings for blank rasters
suppressWarnings(
out <- writeRaster(rast, str_c(write_dir, one_subject$subject_zooniverse_id[1], ".grd"), overwrite=TRUE)
)
}
return(rast)
}
rasterize_one_subject(one_subject)
?walk
?split
rasters <- future_walk(classifications, ~
map(split(.x, .x$subject_zooniverse_id), rasterize_one_subject))
#load libraries
library(raster)
library(sf)
library(fasterize)
library(spex)
library(dplyr)
library(purrr)
library(furrr)
library(lwgeom)
library(stringr)
rasters <- future_walk(classifications, ~
map(split(.x, .x$subject_zooniverse_id), rasterize_one_subject))
library(future)
rasters <- future_walk(classifications, ~
map(split(.x, .x$subject_zooniverse_id), rasterize_one_subject))
library(furrr)
rasters <- future_walk(classifications, ~
map(split(.x, .x$subject_zooniverse_id), rasterize_one_subject))
rasters <- furrr::future_walk(classifications, ~
map(split(.x, .x$subject_zooniverse_id), rasterize_one_subject))
rasters <- walk(classifications, ~
map(split(.x, .x$subject_zooniverse_id), rasterize_one_subject))
rasters <- walk(classifications, ~
map(split(.x, .x$subject_zooniverse_id), rasterize_one_subject))
# testing code
#
# # set.seed(5000)
#  levs <- unique(sf_objects[[1]]$subject_ids) %>% sample(10, replace=FALSE)
# #
#  test <- sf_objects[[1]] %>%
#   #filter(subject_ids %in% 15116674)
#  filter(subject_ids %in% levs)
#
test_rast <- map(split(classifications, classifications$subject_zooniverse_id), rasterize_one_subject)
rasterize_one_subject <- function(one_subject, res = 10, write_out_tile = TRUE){
cat(str_c("Rasterizing ", classifications$subject_zooniverse_id[1], "...\n"))
#make sure this isn't a blank tile
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty)) %>%
dplyr::filter(!empt) %>%
dplyr::select(-empt)
#rasterize based on these nonempty SFS: get it working with all, then add ifelse to have it kick out a blank raster when empty
rast <- fasterize(one_subject_nonempty, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
#write out the tile in the meanwhile
if(write_out_tile){
#supressing warnings for blank rasters
suppressWarnings(
out <- writeRaster(rast, str_c(write_dir, one_subject$subject_zooniverse_id[1], ".grd"), overwrite=TRUE)
)
}
return(rast)
}
# testing code
#
# # set.seed(5000)
#  levs <- unique(sf_objects[[1]]$subject_ids) %>% sample(10, replace=FALSE)
# #
#  test <- sf_objects[[1]] %>%
#   #filter(subject_ids %in% 15116674)
#  filter(subject_ids %in% levs)
#
test_rast <- map(split(classifications, classifications$subject_zooniverse_id), rasterize_one_subject)
bad_sub <- classifications %>%
cat(str_c("Rasterizing ", classifications$subject_zooniverse_id, "...\n"))
rasterize_one_subject <- function(one_subject, res = 10, write_out_tile = TRUE){
cat(str_c("Rasterizing ", classifications$subject_zooniverse_id, "...\n"))
#make sure this isn't a blank tile
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty)) %>%
dplyr::filter(!empt) %>%
dplyr::select(-empt)
#rasterize based on these nonempty SFS: get it working with all, then add ifelse to have it kick out a blank raster when empty
rast <- fasterize(one_subject_nonempty, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
#write out the tile in the meanwhile
if(write_out_tile){
#supressing warnings for blank rasters
suppressWarnings(
out <- writeRaster(rast, str_c(write_dir, one_subject$subject_zooniverse_id[1], ".grd"), overwrite=TRUE)
)
}
return(rast)
}
# testing code
#
# # set.seed(5000)
#  levs <- unique(sf_objects[[1]]$subject_ids) %>% sample(10, replace=FALSE)
# #
#  test <- sf_objects[[1]] %>%
#   #filter(subject_ids %in% 15116674)
#  filter(subject_ids %in% levs)
#
test_rast <- map(split(classifications, classifications$subject_zooniverse_id), rasterize_one_subject)
#see where it chokes
bad_sub <- classifications %>%
filter(subject_zooniverse_id == "AKP0002pek")
#filter to one subject for testing
one_subject <- classifications %>%
filter(subject_zooniverse_id == "AKP0002pek")
r <- fasterize(one_subject, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
plot(r)
View(one_subject)
plot(bad_sub)
#filter to one subject for testing
one_subject <- classifications %>%
filter(subject_zooniverse_id == "AKP0002p3m")
r <- fasterize(one_subject, #give it an SF
raster(one_subject, nrows = 400, ncols = 364), #and a template for the raster
field = "user_name", #must be a factor (bug?)
fun = "count")
plot(r)
one_subject <- bad_sub
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty)) %>%
dplyr::filter(!empt) %>%
dplyr::select(-empt)
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty)))
one_subject_nonempty <- one_subject %>%
dplyr::filter(!(sapply(one_subject$geometry, is_empty))) %>%
mutate(geometry = map(geometry, st_remove_points),
empt = map_lgl(geometry, st_is_empty))
clgeo_CollectionReport(bad_sub)
library(cleangeo)
clgeo_CollectionReport(bad_sub)
